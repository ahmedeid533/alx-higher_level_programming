The ``7-base_geometry.py`` module
======================

Using ``MyList``
-------------------

This is an 7-base_geometry.py text file in reStructuredText format.  First import
``MyList`` from the ``7-base_geometry.py`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

	>>> base_g = BaseGeometry()
    >>> base_g.area()
    Traceback (most recent call last):
    	      ...
    Exception: area() is not implemented
    
    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("name", 5)

deal with non-integer argument

::

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("val", "num")
    Traceback (most recent call last):
    	      ...
    TypeError: val must be an integer

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("bool", True)
    Traceback (most recent call last):
    	      ...
    TypeError: bool must be an integer

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("arg", (8,))
    Traceback (most recent call last):
    	      ...
    TypeError: arg must be an integer

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("val", [-9])
    Traceback (most recent call last):
    	      ...
    TypeError: val must be an integer

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("cal", {8, 5})
    Traceback (most recent call last):
              ...
    TypeError: cal must be an integer

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("none", None)
    Traceback (most recent call last):
              ...
    TypeError: none must be an integer

deal with value error

::

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("name", -45)
    Traceback (most recent call last):
    	      ...
    ValueError: name must be greater than 0

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("name", 0)
    Traceback (most recent call last):
    	      ...
    ValueError: name must be greater than 0

deal with giniral error

::

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("val")
    Traceback (most recent call last):
    	      ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator()
    Traceback (most recent call last):
    	      ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> base_g = BaseGeometry()
    >>> base_g.integer_validator("num", 1, 2)
    Traceback (most recent call last):
    	      ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

    >>> base_g = BaseGeometry()
    >>> base_g.area(2)
    Traceback (most recent call last):
    	      ...
    TypeError: area() takes 1 positional argument but 2 were given

    >>> base_g = BaseGeometry()
    >>> base_g.area(3, 7)
    Traceback (most recent call last):
    	      ...
    TypeError: area() takes 1 positional argument but 3 were given
